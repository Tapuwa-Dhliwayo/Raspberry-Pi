//Huffman Compression source file

#include "huff.h"


//Function Implementations
std::vector<char> char_reader(std::string input){

	input = input + ".txt";

	std::ifstream file;
	char hold;

	file.open(input);

	if(!file){
		std::cout<<"File could not be opened."<<std:
	}
	//Writes charatcers in the file into the char vector doesn't ignore white spaces tabs and newlines and generates a continuous stream of text as a vector of chars
	std::vector<char> characters;
	while(!file.eof()){

		file >> std::noskipws;
		file>>hold;
		characters.push_back(hold);

	}

	file.close();

	return characters;
}

std::map<char, int> freq_generator(std::vector<char> characters){

	std::map<char , int> freq_table;

	auto ref = characters.begin();
	int count = 0;
	for(int i =0; i < (signed int)characters.size(); i++){

		//Counts how many times the char appears in the the array
		for(int j = 0; j < (signed int)characters.size(); j++){

			if(characters.at(j) == *(ref+i)){
				count++;
			}
		}
		//Only added the char and its freq if there is no instance of the character present in the frequency table
		if(freq_table.count(*(ref+i)) == 0){

			//std::cout<<*(ref+i)<<" -> "<<count<<std::endl;
			freq_table.insert(std::make_pair(*(ref+i),count));
		}
		count = 0;
	}

	return freq_table;
}

std::string encoder(std::vector<char> charater_order, std::unordered_map<char , std::string> code_table){

	std::string encoded_data = "";
	//Geenerates the encoded data by looping over the order of the char vector present 
	//and writing the matching code to the present char in the loop if they match

	for(auto& order: charater_order){

		for(auto& trace: code_table){

			if(order == trace.first){

				encoded_data = encoded_data + trace.second;
			}
		}
	}

	return encoded_data;

}

void writer(std::string output, std::string encoded_data, std::map<char , int> freq_table){

	int len = encoded_data.length();
	char buffer[len + 1];
	//Byte array - buffer of the encoded data has been generated
	strcpy(buffer, encoded_data.c_str());

	//Writing out the encoded data array to an output file
	std::ofstream out_file(output,std::ofstream::binary);
	out_file<<buffer;
	out_file.close();

	//Creating a file output.hdr
	std::string header_name = output + ".hdr";

	//Writes the code table to the hdr file in the form 'char' | 'code_symbol'
	std::ofstream out_file2(header_name);
	for(auto &code: freq_table){
		out_file2<<code.first<<"&"<<code.second<<"&";
	}
	out_file2.close();

}

//Huffman Tree implementation
HuffmanTree::HuffmanTree(){};

HuffmanTree::HuffmanTree(std::map<char,int> table){

	std::shared_ptr<HuffmanNode> left;
	std::shared_ptr<HuffmanNode> right;
	std::shared_ptr<HuffmanNode> top;

	//Generates minheap with all the nodes in a simple smalles to largest order
	for (auto&p: table){

		std::shared_ptr<HuffmanNode> holder = std::make_shared<HuffmanNode>(HuffmanNode(p.first,p.second));
        minHeap.push(holder); 
    }

    //This structures the minheap using internal nodes(by adding together nodes) having smaller node on the left and larger node on right
    while (minHeap.size() != 1) { 
  
        left = minHeap.top(); 
        minHeap.pop(); 
  
        right = minHeap.top(); 
        minHeap.pop(); 

        top = std::make_shared<HuffmanNode>(HuffmanNode('$', left->freq + right->freq)); 
  
        top->left = left; 
        top->right = right; 
  
        minHeap.push(top); 
    }
	
}
 
HuffmanTree::HuffmanTree(const HuffmanTree & H):minHeap(H.minHeap){}//std::cout<<"Copy Constructor called."<<std::endl;}

HuffmanTree::HuffmanTree(HuffmanTree && H):minHeap(H.minHeap){

	//Pops out all the elements from minHeap until its empty
	while(!H.minHeap.empty()){
		H.minHeap.pop();
	}
	//std::cout<<"Move Constructor called."<<std::endl;
}

HuffmanTree::~HuffmanTree(){};

HuffmanTree& HuffmanTree::operator=(const HuffmanTree& H){
	
	//std::cout<<"Copy assignment called."<<std::endl;
	if(this == &H){

		return *this;
	}

	minHeap = H.minHeap;

	return *this;
}

HuffmanTree& HuffmanTree::operator=(HuffmanTree &&H){

	//std::cout<<"Move assignment called."<<std::endl;

	if(this == &H){

		return *this;
	}

	minHeap = H.minHeap;
	//Pops out all the elements from minHeap until its empty
	while(!H.minHeap.empty()){
		H.minHeap.pop();
	}

	return *this;
}

bool HuffmanTree::isempty(){

	return minHeap.empty();
}

std::unordered_map<char , std::string > HuffmanTree::code(){

	//This creates the code table by tracing the minheap 
	std::unordered_map<char , std::string > code_table;
	std::shared_ptr<HuffmanNode> root = minHeap.top();
	std::string str = "";

	generateCodes(root,str,&code_table);
	return code_table;

}

std::priority_queue<std::shared_ptr<HuffmanNode>, std::vector<std::shared_ptr<HuffmanNode>>,compare> HuffmanTree::getHeap(){

	return this->minHeap;
}

void generateCodes(std::shared_ptr<HuffmanNode> root, std::string str,std::unordered_map<char , std::string> *code_table) { 
  
	    if (!root){
	        return; 
	    }
	  
	    if (root->data != '$') {

	    	code_table->insert(std::make_pair(root->data,str));
	    }
	  
	    generateCodes(root->left, str + "0",code_table); 
	    generateCodes(root->right, str + "1",code_table); 
}



